package org.patricknoir.platform

/**
  * This package contains all the entities
  * which describe the protocol elements used
  * by Bounded Contexts in order to interact
  * each other within the platform.
  */
package object protocol {

  /**
    * Any communication between from/to bounded context
    * should happen through an entity of type message.
    */
  trait Message

  /**
    * It express a request to perform some
    * actions which might cause a change of
    * one or more entities of the intrinsic
    * model in the bounded countext.
    *
    * A command is a point to point communication,
    * is generated by a component in the platform
    * or an external agent and is always addressed
    * to a well defined component.
    *
    * A valid command always results in one or several
    * side effects which are expressed by [[Event]] messages.
    *
    * An invalid command should always generate a [[Failure]] message.
    */
  trait Command extends Message

  trait Query extends Message

  /**
    * Express the desire to obtain some information
    * from the target component. A request is a point
    * to point communication between two entities.
    *
    * A valid request should always produce a [[Response]]
    * which can be sent back to the requestor or another
    * destination in special cases such as -request forward-.
    *
    * An invalid request should produce a [[Failure]] to
    * be returned to the requestor or another destination
    * in special cases such as -request forward-.
    *
    */
  trait Request extends Query

  /**
    * It is the result of a successful [[Request]]
    * received by the current component and contains
    * the information the requestor asked for.
    *
    * A [[Response]] has always one destination which
    * is usually the entity which generated the original
    * [[Request]].
    */
  trait Response extends Query

  /**
    * This kind of messages have in common the property
    * to generate an information that can be observed
    * by multiple components or observer. They are never
    * sent to a specific entity but are more commonly
    * observed by other systems which might be interested.
    */
  trait Notification extends Message

  /**
    * An [[Event]] is a specific type of [[Notification]]
    * which is generated each time a side effect occurs.
    *
    * [[Event]]s can be generated as consequence of a
    * [[Command]] or another [[Event]] or by external
    * agents like external actors not part of the platform
    * or time based/scheduled.
    *
    */
  trait Event extends Notification

  /**
    * This is usually generated by a component
    * as a consequence of an invalid [[Command]]
    * or [[Request]].
    */
  trait Failure extends Notification

  /**
    * Represent a [[Message]] containing information
    * regarding some component behavior related to
    * its business logic.
    */
  trait Log extends Notification

  /**
    * Represent a [[Message]] containing information
    * regarding some component behavior related to
    * some internal conditions which are not related
    * to its business logic.
    */
  trait Audit extends Notification

  /**
    * This trait can only be applied to [[Message]]
    * in order to mark them as idem-potent messages
    * which will not couse undesired side effects
    * on the case systems might process them twice.
    */
  trait Idempotence { self: Message =>
  }

  case class RuntimeFail(throwable: Throwable) extends Failure

  implicit def runtimeErrorToFailure(throwable: Throwable): RuntimeFail = RuntimeFail(throwable)
}

